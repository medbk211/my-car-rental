from pydantic import BaseModel, EmailStr
from sqlmodel import Field, Column
from sqlalchemy import String
from datetime import datetime
from typing import Optional

# âœ… DÃ©finition de la classe de base pour la conversion ORM â†’ Pydantic
class OurBaseModel(BaseModel):
    class Config:
        from_attributes = True  # Permet de convertir un modÃ¨le ORM en Pydantic

# âœ… ModÃ¨le de base pour une agence
class AgenceBase(OurBaseModel):
    nom_agence: str
    email: EmailStr = Field(sa_column=Column("email", String, unique=True))
    adresse: str
    telepon: str  # ðŸ”¹ Ajout du champ tÃ©lÃ©phone pour Ã©viter les erreurs de NULL

# âœ… ModÃ¨le pour l'inscription d'une agence (inclut les champs sensibles)
class AgenceRegister(AgenceBase):
    password: str
    confirm_password: str
    user_id: Optional[int] = Field(default=None, foreign_key="user.id")  # ðŸ”¹ Suppression de `unique=True`

# âœ… ModÃ¨le pour la sortie de donnÃ©es (ex. rÃ©ponse API)
class AgenceOut(AgenceBase):
    id: int
    
